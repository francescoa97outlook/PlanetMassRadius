import tkinter as tk
from tkinter import messagebox as msgbox
import pandas as pd
import webbrowser
from tkinter.filedialog import askopenfilename
import numpy as np


def helpButtonFunc():
    msgbox.showinfo(title="INFO",
                    message="\n'Catalog previous output?' needs to be checked if the catalog being tried to be imported is an output generated by this tool previously.\n\nSkiprow: is an integer. If 1, the first row (header) will be ignored (it is required for the on-line TEPCAT catalogue. If 0, the file does not contain an header.\n\nDelim_whitespace: select this option if the columns of the catalogue are separated by blank spaces.\n\nDelimiter: is a string. It represents the character used in the catalogue to separate the columns.\n\n'Columns names from other file?' is used to upload the columns names from other csv files. (i.e. the TEPCAT catalogue is not well formatted to read the column names, so i added a file containing them). Use this option in case your catalog does not have well formatted names or in case the tool does not read them properly.")


def infoPandasDocFunc():
    webbrowser.open('https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html', new=2)


class Frame_Load_Data:
    gui = None
    frame_load_Data = None
    label = None
    text = None
    loadData = None
    data0 = None
    skiprow = None
    delim_whitespace_var = None
    delim_whitespace = None
    delimiter = None
    openFile = None
    openFileC = None
    infoPandasDoc = None
    openFile = None
    help_button = None
    catalog_is_a_previous_output_var = None
    catalog_is_a_previous_output_check = None
    column_path = None
    use_column_csv_var = None
    use_column_csv_check = None
    column_names = None

    def __init__(self, window, gui):
        self.gui = gui
        self.frame_load_Data = tk.Frame(window, highlightbackground="black", highlightthickness=1, padx=5, pady=2)

        self.label = tk.Label(master=self.frame_load_Data, text='Insert Url or Local path: ', fg="blue",
                              font=('Sans', '13', 'bold'))
        self.label.grid(column=0, row=0)

        self.text = tk.Text(master=self.frame_load_Data, width=75, height=1)
        self.text.grid(column=1, row=0, columnspan=8)
        self.text.insert(tk.END, "https://www.astro.keele.ac.uk/jkt/tepcat/allplanets-ascii.txt")

        self.openFile = tk.Button(master=self.frame_load_Data, text=" Open File ", bg="orange",
                                  font=('Sans', '13', 'bold'), command=self.openFileFunc)
        self.openFile.grid(column=9, row=0)

        self.help_button = tk.Button(master=self.frame_load_Data, text="?", command=helpButtonFunc, bg="black",
                                     fg="yellow", font=('Sans', '10', 'bold'))
        self.help_button.grid(column=10, row=0)

        self.catalog_is_a_previous_output_var = tk.BooleanVar()
        self.catalog_is_a_previous_output_check = tk.Checkbutton(master=self.frame_load_Data,
                                                                 text="Catalog previous output?",
                                                                 variable=self.catalog_is_a_previous_output_var,
                                                                 fg="#cc3300",
                                                                 font=('Sans', '13', 'bold'), command=self.enable_vars)
        self.catalog_is_a_previous_output_check.grid(column=0, row=1)

        self.label = tk.Label(master=self.frame_load_Data, text=' Skiprow ', fg="blue", font=('Sans', '13', 'bold'))
        self.label.grid(column=2, row=1)

        self.skiprow = tk.Entry(master=self.frame_load_Data, width=10)
        self.skiprow.grid(column=3, row=1)
        self.skiprow.insert(tk.END, "1")

        self.delim_whitespace_var = tk.BooleanVar()
        self.delim_whitespace = tk.Checkbutton(master=self.frame_load_Data, text=" Delim_whitespace ",
                                               variable=self.delim_whitespace_var, fg="#cc3300",
                                               font=('Sans', '13', 'bold'))
        self.delim_whitespace_var.set(True)
        self.delim_whitespace.grid(column=5, row=1)

        self.label = tk.Label(master=self.frame_load_Data, text=' Delimiter ', fg="blue", font=('Sans', '13', 'bold'))
        self.label.grid(column=8, row=1)

        self.delimiter = tk.Entry(master=self.frame_load_Data, width=10)
        self.delimiter.grid(column=9, row=1)
        self.delimiter.insert(tk.END, "None")

        self.use_column_csv_var = tk.BooleanVar()
        self.use_column_csv_var.set(True)
        self.use_column_csv_check = tk.Checkbutton(master=self.frame_load_Data,
                                                   text="Columns names from other file?",
                                                   variable=self.use_column_csv_var,
                                                   fg="#cc3300",
                                                   font=('Sans', '13', 'bold'), command=self.enable_column)
        self.use_column_csv_check.grid(column=0, row=2)

        self.column_path = tk.Text(master=self.frame_load_Data, width=75, height=1)
        self.column_path.grid(column=1, row=2, columnspan=5)
        self.column_path.insert(tk.END, "./Data/Column_names.csv")

        self.openFileC = tk.Button(master=self.frame_load_Data, text="Open File Column", bg="orange",
                                  font=('Sans', '13', 'bold'), command=self.openFileFuncColumn)
        self.openFileC.grid(column=7, row=2, columnspan=3)

        self.loadData = tk.Button(master=self.frame_load_Data, width=30, height=2, text=" Load Data ", bg="#00ff00",
                                  font=('Sans', '13', 'bold'), command=self.loadDataFunc)
        self.loadData.grid(column=0, columnspan=10, row=3)

        self.label = tk.Label(master=self.frame_load_Data, text='')
        self.label.grid(column=0, columnspan=5, row=4)

        self.label = tk.Label(master=self.frame_load_Data, text=' Click the yellow button for more information ',
                              fg="red", font=('Sans', '13', 'bold'))
        self.label.grid(column=0, columnspan=5, row=5)

        self.infoPandasDoc = tk.Button(master=self.frame_load_Data, text=" Pandas Documentation read_csv ", bg="yellow",
                                       width=30, font=('Sans', '13', 'bold'), command=infoPandasDocFunc)
        self.infoPandasDoc.grid(column=5, row=5, columnspan=5)

        self.frame_load_Data.pack(padx=3, pady=3)

    def loadDataFunc(self):
        text = self.text.get("1.0", tk.END)
        text = text.replace("\n", "")
        column_path = self.column_path.get("1.0", tk.END)
        column_path = column_path.replace("\n", "")
        try:
            if self.catalog_is_a_previous_output_var.get():
                self.data0 = pd.read_csv(text, header=None)
            else:
                if self.delim_whitespace_var.get() or self.delimiter == "None":
                    delimiter = None
                else:
                    delimiter = self.delimiter.get()
                self.data0 = pd.read_csv(text, skiprows=int(self.skiprow.get()), delimiter=delimiter,
                                         delim_whitespace=self.delim_whitespace_var.get(), header=None)
            if self.use_column_csv_var.get():
                column_names = pd.read_csv(column_path, header=None)
                self.column_names = column_names.loc[[0]]
            else:
                self.column_names = self.data0.loc[[0]]
                # self.data0 = self.data0.drop(1)
            for child in self.gui.frame_constrains.frame_constrains.winfo_children():
                child.configure(state='normal')
        except:
            msgbox.showerror(title="ERROR",
                             message="Unable to load Data, check your the path/URL or the connection")

    def openFileFunc(self):
        filename = askopenfilename(initialdir="Data")
        if filename != '' and len(filename) != 0:
            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, filename)
        else:
            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, "https://www.astro.keele.ac.uk/jkt/tepcat/allplanets-ascii.txt")

    def openFileFuncColumn(self):
        filename = askopenfilename(initialdir="Data")
        if filename != '' and len(filename) != 0:
            self.column_path.delete('1.0', tk.END)
            self.column_path.insert(tk.END, filename)
        else:
            self.column_path.delete('1.0', tk.END)
            self.column_path.insert(tk.END, "./Data/Column_names.csv")

    def enable_vars(self):
        if self.catalog_is_a_previous_output_var.get():
            self.delim_whitespace.configure(state='disabled')
            self.skiprow.configure(state='disabled')
            self.delimiter.configure(state='disabled')
            self.openFileC.config(state=tk.DISABLED)
            self.use_column_csv_var.set(False)
            self.use_column_csv_check.config(state=tk.DISABLED)
        else:
            self.delim_whitespace.configure(state='normal')
            self.skiprow.configure(state='normal')
            self.delimiter.configure(state='normal')
            self.openFileC.config(state=tk.NORMAL)
            self.use_column_csv_var.set(True)
            self.use_column_csv_check.config(state=tk.NORMAL)

    def enable_column(self):
        if self.use_column_csv_var.get():
            self.openFileC.config(state=tk.NORMAL)
        else:
            self.openFileC.config(state=tk.DISABLED)
